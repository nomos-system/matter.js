name: 'Chip Tool Tests'
description: 'prepares and executes Chip Tool and Certification tests'
author: 'Apollon77'
inputs:
  connectedhomeip-tag:
    description: 'Tag of the connectedhomeip repo to use'
    required: true
    default: 'master' # "v1.1-branch" is not containing our current status, so we use master till 1.2 comes out
  rebuild-chip-tool:
    description: 'Rebuild the chip-tool'
    required: true
    default: "false"
  runner-os:
    description: 'Runner Operating system'
    required: true
    default: 'Linux'
  build-matter-js:
    description: 'Also Build matter-js?'
    required: true
    default: "true"
  patch-test-yaml:
    description: 'Patch Yaml Files for Matter.js testrun?'
    required: true
    default: "false"

runs:
  using: 'composite'
  steps:
    - name: Install Debian deps
      id: install-deps
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y git gcc g++ pkg-config libssl-dev libdbus-1-dev libglib2.0-dev libavahi-client-dev ninja-build python3-venv python3-dev python3-pip unzip libgirepository1.0-dev libgirepository-2.0-dev libcairo2-dev libreadline-dev libpcsclite-dev

    - name: Prepare Bin Directory
      id: prepare_bin
      shell: bash
      run: |
        mkdir bin

    - name: Get current date
      id: date
      shell: bash
      run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

    - name: Cache Bin files
      id: cache-bin
      uses: actions/cache@v4
      env:
        cache-name: chip-bin
      with:
        path: ./bin
        key: ${{ inputs.runner-os }}-build-yaml-${{ env.cache-name }}-${{ inputs.connectedhomeip-tag }}-${{ env.DATE }}

    - name: Checkout Matter SDK
      id: checkout-sdk
      shell: bash
      run: |
        git clone https://github.com/project-chip/connectedhomeip.git --depth=1 --branch=${{ inputs.connectedhomeip-tag }}
        cd connectedhomeip
        scripts/checkout_submodules.py --shallow --platform linux

    - name: Cache Python Environments files
      id: cache-env
      uses: actions/cache@v4
      env:
        cache-name: chip-env
      with:
        path: ./connectedhomeip/.environment
        key: ${{ inputs.runner-os }}-env-${{ env.cache-name }}-${{ inputs.connectedhomeip-tag }}-${{ env.DATE }}

    - name: Cache Chip out files
      id: cache-out
      uses: actions/cache@v4
      env:
        cache-name: chip-out
      with:
        path: ./connectedhomeip/out/
        key: ${{ inputs.runner-os }}-out-${{ env.cache-name }}-${{ inputs.connectedhomeip-tag }}-${{ env.DATE }}

    # Only build if cache is not hit or if the commit message contains '[rebuild-chip]'
    - if: ${{ steps.cache-env.outputs.cache-hit != 'true' || inputs.rebuild-chip-tool == 'true' }}
      name: Build python framework
      id: build-python
      shell: bash
      run: |
        cd connectedhomeip
        ./scripts/run_in_build_env.sh './scripts/build_python.sh --install_virtual_env out/venv'

    # Only build if cache is not hit or if the commit message contains '[rebuild-chip]'
    - if: ${{ steps.cache-bin.outputs.cache-hit != 'true' || inputs.rebuild-chip-tool == 'true' }}
      name: Build executables
      id: build-executables
      env:
        BUILD_VARIANT: "ipv6only-no-ble-no-wifi-no-shell-tsan-clang"
      shell: bash
      run: |
        cd connectedhomeip
        ./scripts/run_in_build_env.sh \
          "./scripts/build/build_examples.py \
            --target linux-x64-chip-tool-${BUILD_VARIANT} \
            --target linux-x64-all-clusters-${BUILD_VARIANT} \
            --target linux-x64-lock-${BUILD_VARIANT} \
            --target linux-x64-tv-app-${BUILD_VARIANT} \
            --target linux-x64-bridge-${BUILD_VARIANT} \
            --target linux-x64-lit-icd-${BUILD_VARIANT} \
            --target linux-x64-microwave-oven-${BUILD_VARIANT} \
            --target linux-x64-rvc-${BUILD_VARIANT} \
            --target linux-x64-network-manager-${BUILD_VARIANT} \
            --target linux-x64-energy-gateway-${BUILD_VARIANT} \
            --target linux-x64-energy-management-${BUILD_VARIANT} \
            build
          "
        cp out/linux-x64-chip-tool-${BUILD_VARIANT}/chip-tool ../bin/
        cp out/linux-x64-all-clusters-${BUILD_VARIANT}/chip-all-clusters-app ../bin/
        cp out/linux-x64-bridge-${BUILD_VARIANT}/chip-bridge-app ../bin/
        cp out/linux-x64-lock-${BUILD_VARIANT}/chip-lock-app ../bin/
        cp out/linux-x64-tv-app-${BUILD_VARIANT}/chip-tv-app ../bin/
        cp out/linux-x64-lit-icd-${BUILD_VARIANT}/lit-icd-app ../bin/
        cp out/linux-x64-microwave-oven-${BUILD_VARIANT}/chip-microwave-oven-app ../bin/
        cp out/linux-x64-rvc-${BUILD_VARIANT}/chip-rvc-app ../bin/
        cp out/linux-x64-network-manager-${BUILD_VARIANT}/matter-network-manager-app ../bin/
        cp out/linux-x64-energy-gateway-${BUILD_VARIANT}/chip-energy-gateway-app ../bin/
        cp out/linux-x64-energy-management-${BUILD_VARIANT}/chip-energy-management-app ../bin/

    - name: Display used binaries
      shell: bash
      run: |
        echo "Connected IP Branch: ${{ inputs.connectedhomeip-tag }}"
        ls -la bin

    - if: ${{ inputs.build-matter-js == 'true' }}
      name: Install and build matter.js
      shell: bash
      run: |
        npm ci

    - if: ${{ inputs.patch-test-yaml == 'true' }}
      name: Patch test definitions
      shell: bash
      run: |
        cp -r support/chip-testing/patched-test-files/* connectedhomeip/src/app/tests/suites/
      # needed as long as we are still on Matter 1.1 but use tests from master branch from SDK

    - name: Tweak security settings to prevent errors on Ubuntu containers
      shell: bash
      run: sudo sysctl kernel.apparmor_restrict_unprivileged_userns=0
